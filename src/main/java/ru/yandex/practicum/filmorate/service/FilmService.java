package ru.yandex.practicum.filmorate.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.filmorate.dao.FilmDao;
import ru.yandex.practicum.filmorate.dao.UserDao;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Genre;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class FilmService {
    @Qualifier("filmDaoImpl")
    private final FilmDao filmDao;
    @Qualifier("userDaoImpl")
    private final UserDao userDao;

    public Film addFilm(Film film) {
        Film createdFilm = filmDao.createFilm(film);
        Long autoGeneratedId = createdFilm.getId();
        log.debug("Фильм сохранен в таблице films, присвоен id={}", autoGeneratedId);
        film.setId(autoGeneratedId);
        saveGenresForFilm(film);
        log.debug("Жанры для фильма с id={} сохранены в таблице film_genres", autoGeneratedId);
        return filmDao.getFilmById(autoGeneratedId);
    }

    public Film getFilmById(Long id) {
        Film filmFromDatabase = filmDao.getFilmById(id);
        log.debug("Из таблицы films считан фильм с id={}: {}", id, filmFromDatabase);
        return filmFromDatabase;
    }

    public List<Film> getAllFilms() {
        List<Film> allFilms = filmDao.getAllFilms();
        log.debug("Из таблицы films считаны все фильмы: {}", allFilms);
        return filmDao.getAllFilms();
    }

    public Film updateFilm(Film film) {
        Long filmId = film.getId();
        filmDao.updateFilm(film);
        log.debug("Фильм с id={} обновлен в таблице films", filmId);
        filmDao.deleteGenresForFilm(filmId);
        saveGenresForFilm(film);
        log.debug("Жанры для фильма с id={} обновлены в таблице film_genres", filmId);
        return filmDao.getFilmById(filmId);
    }

    private void saveGenresForFilm(Film film) {
        if (film.getGenres() != null) {
            List<Integer> genreIds = film.getGenres().stream()
                    .map(Genre::getId)
                    .collect(Collectors.toList());
            filmDao.createGenresForFilm(film.getId(), genreIds);
        }
    }

    public void addLikeToFilm(Long filmId, Long userId) {
        userDao.getUserById(userId);
        filmDao.saveLike(filmId, userId);
        log.debug("Лайк пользователя с id={} добавлен для фильма с id={}, добавлена запись в таблицу likes", userId, filmId);
    }

    public void removeLikeFromFilm(Long filmId, Long userId) {
        userDao.getUserById(userId);
        filmDao.deleteLike(filmId, userId);
        log.debug("Лайк пользователя с id={} удален для фильма с id={},  удалена запись в таблице  likes", userId, filmId);
    }

    public List<Film> getTopFilms(Integer count) {
        List<Film> topFilms = filmDao.getAllFilms().stream()
                .sorted((film1, film2) -> film2.getUserIdsWhoLiked().size() - film1.getUserIdsWhoLiked().size())
                .limit(count)
                .collect(Collectors.toList());
        log.debug("Топ фильмов с ограничением в {} шт. получен", count);
        return topFilms;
    }

    public  List<Film> getCommonFilms(Long userId, Long friendId) {
        List<Film> commonFilms = filmDao.getAllFilms().stream()
                .filter(film -> film.getUserIdsWhoLiked().contains(userId))
                .filter(film -> film.getUserIdsWhoLiked().contains(friendId))
                .sorted((film1, film2) -> film2.getUserIdsWhoLiked().size() - film1.getUserIdsWhoLiked().size())
                .collect(Collectors.toList());
        log.debug("Для пользователя {} и {} считаны все общие фильмы: {}", userId, friendId, commonFilms);
        return commonFilms;
    }
}